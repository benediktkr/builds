def owntone_main_branch = "master"
def clean_ws_after_build = false

pipeline {
    agent any
    parameters {
        booleanParam(name: "rebase_filescans", defaultValue: true, description: "rebase branch for owntone-server#1179 from github:whatdoineed2do/forked-daapd")
        string(name: "VITE_OWNTONE_URL", defaultValue: "owntone.local", description: "build with different default url (when we start building the frontend). currently does nothing, and is ignored if its the default value (but its annoying)")
    }
    options {
        timestamps()
        ansiColor("xterm")
        disableConcurrentBuilds()
        checkoutToSubdirectory 'builds'
        buildDiscarder(
            logRotator(
                // daysToKeepStr: '15',
                // artifactDaysToKeepStr: '15',
                numToKeepStr:'30',
                artifactNumToKeepStr: '1'
            )
        )

    }
    stages {
        stage('clean') {
            when {
                expression { clean_ws_after_build == false }
            }
            steps {
                cleanWs()
            }
        }
        stage('checkout') {
            steps {
                script {
                    // can also use env.JOB_NAME
                    sh "ln -s builds/owntone owntone"

                    // clone the owntone repos
                    def mirrors = "https://git.sudo.is/mirrors"
                    dir('owntone-server') {
                        git url: "${mirrors}/owntone-server.git", branch: owntone_main_branch
                    }
                    dir('owntone-apt') {
                        git url: "${mirrors}/owntone-apt.git", branch: owntone_main_branch
                    }

                    // clone whatdoineed2d's fork if we will rebase their file-scan-dir branch
                    if (params.rebase_filescans) {
                        dir('owntone-server') {
                            sh "git remote add whatdoineed2d https://github.com/whatdoineed2do/forked-daapd"
                            sh "git fetch whatdoineed2d file-scan-dir-path"
                            sh "git branch"
                        }
                    }
                }
            }
        }
        stage('l') {
            steps {
                script {
                    sh "pwd"
                    sh "ls -l"
                }
            }
        }
    }
    post {
        cleanup {
            script {
                if (clean_ws_after_build == true) {
                    cleanWs(deleteDirs: true, disableDeferredWipeout: true, notFailBuild: true)
                }
            }
        }
    }
}
